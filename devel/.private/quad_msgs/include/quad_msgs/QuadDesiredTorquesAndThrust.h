// Generated by gencpp from file quad_msgs/QuadDesiredTorquesAndThrust.msg
// DO NOT EDIT!


#ifndef QUAD_MSGS_MESSAGE_QUADDESIREDTORQUESANDTHRUST_H
#define QUAD_MSGS_MESSAGE_QUADDESIREDTORQUESANDTHRUST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quad_msgs
{
template <class ContainerAllocator>
struct QuadDesiredTorquesAndThrust_
{
  typedef QuadDesiredTorquesAndThrust_<ContainerAllocator> Type;

  QuadDesiredTorquesAndThrust_()
    : header()
    , roll_torque(0.0)
    , pitch_torque(0.0)
    , yaw_torque(0.0)
    , normalized_thrust(0.0)  {
    }
  QuadDesiredTorquesAndThrust_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , roll_torque(0.0)
    , pitch_torque(0.0)
    , yaw_torque(0.0)
    , normalized_thrust(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _roll_torque_type;
  _roll_torque_type roll_torque;

   typedef double _pitch_torque_type;
  _pitch_torque_type pitch_torque;

   typedef double _yaw_torque_type;
  _yaw_torque_type yaw_torque;

   typedef double _normalized_thrust_type;
  _normalized_thrust_type normalized_thrust;





  typedef boost::shared_ptr< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> const> ConstPtr;

}; // struct QuadDesiredTorquesAndThrust_

typedef ::quad_msgs::QuadDesiredTorquesAndThrust_<std::allocator<void> > QuadDesiredTorquesAndThrust;

typedef boost::shared_ptr< ::quad_msgs::QuadDesiredTorquesAndThrust > QuadDesiredTorquesAndThrustPtr;
typedef boost::shared_ptr< ::quad_msgs::QuadDesiredTorquesAndThrust const> QuadDesiredTorquesAndThrustConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator1> & lhs, const ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.roll_torque == rhs.roll_torque &&
    lhs.pitch_torque == rhs.pitch_torque &&
    lhs.yaw_torque == rhs.yaw_torque &&
    lhs.normalized_thrust == rhs.normalized_thrust;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator1> & lhs, const ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quad_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5eb0ff0d044d837037e12925a221c263";
  }

  static const char* value(const ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5eb0ff0d044d8370ULL;
  static const uint64_t static_value2 = 0x37e12925a221c263ULL;
};

template<class ContainerAllocator>
struct DataType< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quad_msgs/QuadDesiredTorquesAndThrust";
  }

  static const char* value(const ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Quadrotor Desired Torque and Thrust\n"
"\n"
"Header header\n"
"\n"
"float64 roll_torque\n"
"float64 pitch_torque\n"
"float64 yaw_torque\n"
"float64 normalized_thrust\n"
"\n"
"#\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.roll_torque);
      stream.next(m.pitch_torque);
      stream.next(m.yaw_torque);
      stream.next(m.normalized_thrust);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QuadDesiredTorquesAndThrust_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quad_msgs::QuadDesiredTorquesAndThrust_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "roll_torque: ";
    Printer<double>::stream(s, indent + "  ", v.roll_torque);
    s << indent << "pitch_torque: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_torque);
    s << indent << "yaw_torque: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_torque);
    s << indent << "normalized_thrust: ";
    Printer<double>::stream(s, indent + "  ", v.normalized_thrust);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUAD_MSGS_MESSAGE_QUADDESIREDTORQUESANDTHRUST_H
