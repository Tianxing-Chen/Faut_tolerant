// Generated by gencpp from file quad_msgs/QuadDesiredState.msg
// DO NOT EDIT!


#ifndef QUAD_MSGS_MESSAGE_QUADDESIREDSTATE_H
#define QUAD_MSGS_MESSAGE_QUADDESIREDSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace quad_msgs
{
template <class ContainerAllocator>
struct QuadDesiredState_
{
  typedef QuadDesiredState_<ContainerAllocator> Type;

  QuadDesiredState_()
    : header()
    , position()
    , velocity()
    , acceleration()
    , jerk()
    , snap()
    , yaw(0.0)
    , yaw_rate(0.0)
    , yaw_acceleration(0.0)  {
    }
  QuadDesiredState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)
    , jerk(_alloc)
    , snap(_alloc)
    , yaw(0.0)
    , yaw_rate(0.0)
    , yaw_acceleration(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _jerk_type;
  _jerk_type jerk;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _snap_type;
  _snap_type snap;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef double _yaw_acceleration_type;
  _yaw_acceleration_type yaw_acceleration;





  typedef boost::shared_ptr< ::quad_msgs::QuadDesiredState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quad_msgs::QuadDesiredState_<ContainerAllocator> const> ConstPtr;

}; // struct QuadDesiredState_

typedef ::quad_msgs::QuadDesiredState_<std::allocator<void> > QuadDesiredState;

typedef boost::shared_ptr< ::quad_msgs::QuadDesiredState > QuadDesiredStatePtr;
typedef boost::shared_ptr< ::quad_msgs::QuadDesiredState const> QuadDesiredStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quad_msgs::QuadDesiredState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quad_msgs::QuadDesiredState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quad_msgs::QuadDesiredState_<ContainerAllocator1> & lhs, const ::quad_msgs::QuadDesiredState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.jerk == rhs.jerk &&
    lhs.snap == rhs.snap &&
    lhs.yaw == rhs.yaw &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.yaw_acceleration == rhs.yaw_acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quad_msgs::QuadDesiredState_<ContainerAllocator1> & lhs, const ::quad_msgs::QuadDesiredState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quad_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quad_msgs::QuadDesiredState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quad_msgs::QuadDesiredState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quad_msgs::QuadDesiredState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quad_msgs::QuadDesiredState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quad_msgs::QuadDesiredState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quad_msgs::QuadDesiredState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quad_msgs::QuadDesiredState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "065ef74908cfffbd6261497df2dd0d01";
  }

  static const char* value(const ::quad_msgs::QuadDesiredState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x065ef74908cfffbdULL;
  static const uint64_t static_value2 = 0x6261497df2dd0d01ULL;
};

template<class ContainerAllocator>
struct DataType< ::quad_msgs::QuadDesiredState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quad_msgs/QuadDesiredState";
  }

  static const char* value(const ::quad_msgs::QuadDesiredState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quad_msgs::QuadDesiredState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Quadrotor Desired State \n"
"\n"
"Header header\n"
"\n"
"# 3D position in world frame [m]\n"
"geometry_msgs/Vector3 position\n"
"\n"
"# 3D velocity in world frame [m/s]\n"
"geometry_msgs/Vector3 velocity\n"
"\n"
"# 3D acceleration in world frame [m/s^2]\n"
"geometry_msgs/Vector3 acceleration\n"
"\n"
"# 3D jerk in world frame [m/s^3]\n"
"geometry_msgs/Vector3 jerk\n"
"\n"
"# 3D snap in world frame [m/s^4]\n"
"geometry_msgs/Vector3 snap\n"
"\n"
"# yaw angle with respect to world frame [rad]\n"
"float64 yaw\n"
"\n"
"# angular velocity in the body z-direction [rad/s]\n"
"float64 yaw_rate\n"
"\n"
"# angular acceleration in the body z-direction [rad/s^2]\n"
"float64 yaw_acceleration\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::quad_msgs::QuadDesiredState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quad_msgs::QuadDesiredState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.jerk);
      stream.next(m.snap);
      stream.next(m.yaw);
      stream.next(m.yaw_rate);
      stream.next(m.yaw_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QuadDesiredState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quad_msgs::QuadDesiredState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quad_msgs::QuadDesiredState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "jerk: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.jerk);
    s << indent << "snap: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.snap);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "yaw_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUAD_MSGS_MESSAGE_QUADDESIREDSTATE_H
