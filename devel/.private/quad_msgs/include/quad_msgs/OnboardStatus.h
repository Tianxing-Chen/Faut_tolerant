// Generated by gencpp from file quad_msgs/OnboardStatus.msg
// DO NOT EDIT!


#ifndef QUAD_MSGS_MESSAGE_ONBOARDSTATUS_H
#define QUAD_MSGS_MESSAGE_ONBOARDSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quad_msgs
{
template <class ContainerAllocator>
struct OnboardStatus_
{
  typedef OnboardStatus_<ContainerAllocator> Type;

  OnboardStatus_()
    : header()
    , commander_state(0)
    , battery_state(0)
    , control_mode(0)
    , battery_voltage(0.0)
    , pcb_temperature(0.0)  {
    }
  OnboardStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , commander_state(0)
    , battery_state(0)
    , control_mode(0)
    , battery_voltage(0.0)
    , pcb_temperature(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _commander_state_type;
  _commander_state_type commander_state;

   typedef uint8_t _battery_state_type;
  _battery_state_type battery_state;

   typedef uint8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef double _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef float _pcb_temperature_type;
  _pcb_temperature_type pcb_temperature;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LANDED)
  #undef LANDED
#endif
#if defined(_WIN32) && defined(AUTONOMOUS_FLYING)
  #undef AUTONOMOUS_FLYING
#endif
#if defined(_WIN32) && defined(MANUAL_FLYING)
  #undef MANUAL_FLYING
#endif
#if defined(_WIN32) && defined(EMERGENCY_LANDING)
  #undef EMERGENCY_LANDING
#endif
#if defined(_WIN32) && defined(INVALID)
  #undef INVALID
#endif
#if defined(_WIN32) && defined(GOOD)
  #undef GOOD
#endif
#if defined(_WIN32) && defined(LOW)
  #undef LOW
#endif
#if defined(_WIN32) && defined(CRITICAL)
  #undef CRITICAL
#endif
#if defined(_WIN32) && defined(RATE_MODE)
  #undef RATE_MODE
#endif
#if defined(_WIN32) && defined(ATTITUDE_MODE)
  #undef ATTITUDE_MODE
#endif

  enum {
    LANDED = 0u,
    AUTONOMOUS_FLYING = 1u,
    MANUAL_FLYING = 2u,
    EMERGENCY_LANDING = 3u,
    INVALID = 0u,
    GOOD = 1u,
    LOW = 2u,
    CRITICAL = 3u,
    RATE_MODE = 0u,
    ATTITUDE_MODE = 1u,
  };


  typedef boost::shared_ptr< ::quad_msgs::OnboardStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quad_msgs::OnboardStatus_<ContainerAllocator> const> ConstPtr;

}; // struct OnboardStatus_

typedef ::quad_msgs::OnboardStatus_<std::allocator<void> > OnboardStatus;

typedef boost::shared_ptr< ::quad_msgs::OnboardStatus > OnboardStatusPtr;
typedef boost::shared_ptr< ::quad_msgs::OnboardStatus const> OnboardStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quad_msgs::OnboardStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quad_msgs::OnboardStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quad_msgs::OnboardStatus_<ContainerAllocator1> & lhs, const ::quad_msgs::OnboardStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.commander_state == rhs.commander_state &&
    lhs.battery_state == rhs.battery_state &&
    lhs.control_mode == rhs.control_mode &&
    lhs.battery_voltage == rhs.battery_voltage &&
    lhs.pcb_temperature == rhs.pcb_temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quad_msgs::OnboardStatus_<ContainerAllocator1> & lhs, const ::quad_msgs::OnboardStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quad_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::quad_msgs::OnboardStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quad_msgs::OnboardStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quad_msgs::OnboardStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quad_msgs::OnboardStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quad_msgs::OnboardStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quad_msgs::OnboardStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quad_msgs::OnboardStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab2e46231b964a6f29dabac1bc0f4937";
  }

  static const char* value(const ::quad_msgs::OnboardStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab2e46231b964a6fULL;
  static const uint64_t static_value2 = 0x29dabac1bc0f4937ULL;
};

template<class ContainerAllocator>
struct DataType< ::quad_msgs::OnboardStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quad_msgs/OnboardStatus";
  }

  static const char* value(const ::quad_msgs::OnboardStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quad_msgs::OnboardStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Status message from the PX4\n"
"\n"
"# commander state enums\n"
"uint8 LANDED=0\n"
"uint8 AUTONOMOUS_FLYING=1\n"
"uint8 MANUAL_FLYING=2\n"
"uint8 EMERGENCY_LANDING=3\n"
"\n"
"# battery state enums\n"
"uint8 INVALID=0\n"
"uint8 GOOD=1\n"
"uint8 LOW=2\n"
"uint8 CRITICAL=3\n"
"\n"
"        \n"
"# control mode enums\n"
"uint8 RATE_MODE=0\n"
"uint8 ATTITUDE_MODE=1\n"
"\n"
"Header header\n"
"\n"
"uint8 commander_state\n"
"uint8 battery_state\n"
"uint8 control_mode\n"
"float64 battery_voltage\n"
"float32 pcb_temperature\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::quad_msgs::OnboardStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quad_msgs::OnboardStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.commander_state);
      stream.next(m.battery_state);
      stream.next(m.control_mode);
      stream.next(m.battery_voltage);
      stream.next(m.pcb_temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OnboardStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quad_msgs::OnboardStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quad_msgs::OnboardStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "commander_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.commander_state);
    s << indent << "battery_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_state);
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "battery_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "pcb_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.pcb_temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUAD_MSGS_MESSAGE_ONBOARDSTATUS_H
