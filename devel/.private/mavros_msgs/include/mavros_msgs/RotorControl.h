// Generated by gencpp from file mavros_msgs/RotorControl.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_ROTORCONTROL_H
#define MAVROS_MSGS_MESSAGE_ROTORCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct RotorControl_
{
  typedef RotorControl_<ContainerAllocator> Type;

  RotorControl_()
    : header()
    , control_mode(0)
    , thrust(0.0)
    , mot_throttle()
    , rotor_thrust()  {
      mot_throttle.assign(0.0);

      rotor_thrust.assign(0.0);
  }
  RotorControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , control_mode(0)
    , thrust(0.0)
    , mot_throttle()
    , rotor_thrust()  {
  (void)_alloc;
      mot_throttle.assign(0.0);

      rotor_thrust.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef double _thrust_type;
  _thrust_type thrust;

   typedef boost::array<double, 4>  _mot_throttle_type;
  _mot_throttle_type mot_throttle;

   typedef boost::array<double, 4>  _rotor_thrust_type;
  _rotor_thrust_type rotor_thrust;





  typedef boost::shared_ptr< ::mavros_msgs::RotorControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::RotorControl_<ContainerAllocator> const> ConstPtr;

}; // struct RotorControl_

typedef ::mavros_msgs::RotorControl_<std::allocator<void> > RotorControl;

typedef boost::shared_ptr< ::mavros_msgs::RotorControl > RotorControlPtr;
typedef boost::shared_ptr< ::mavros_msgs::RotorControl const> RotorControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::RotorControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::RotorControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::RotorControl_<ContainerAllocator1> & lhs, const ::mavros_msgs::RotorControl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.control_mode == rhs.control_mode &&
    lhs.thrust == rhs.thrust &&
    lhs.mot_throttle == rhs.mot_throttle &&
    lhs.rotor_thrust == rhs.rotor_thrust;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::RotorControl_<ContainerAllocator1> & lhs, const ::mavros_msgs::RotorControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::RotorControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::RotorControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::RotorControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::RotorControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::RotorControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::RotorControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::RotorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1897a820e48a9b32eaef11f9f222593b";
  }

  static const char* value(const ::mavros_msgs::RotorControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1897a820e48a9b32ULL;
  static const uint64_t static_value2 = 0xeaef11f9f222593bULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::RotorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/RotorControl";
  }

  static const char* value(const ::mavros_msgs::RotorControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::RotorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#This message is sent to a low level controller on the quadrotor\n"
"\n"
"std_msgs/Header header\n"
"# Control mode as defined above\n"
"uint8 control_mode\n"
"\n"
"# Collective mass normalized thrust [m/s^2]\n"
"float64 thrust\n"
"\n"
"# Single rotor throttle [0-2000]\n"
"float64[4] mot_throttle\n"
"\n"
"# Single rotor thrust\n"
"float64[4] rotor_thrust\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::RotorControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::RotorControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.control_mode);
      stream.next(m.thrust);
      stream.next(m.mot_throttle);
      stream.next(m.rotor_thrust);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RotorControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::RotorControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::RotorControl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "thrust: ";
    Printer<double>::stream(s, indent + "  ", v.thrust);
    s << indent << "mot_throttle[]" << std::endl;
    for (size_t i = 0; i < v.mot_throttle.size(); ++i)
    {
      s << indent << "  mot_throttle[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mot_throttle[i]);
    }
    s << indent << "rotor_thrust[]" << std::endl;
    for (size_t i = 0; i < v.rotor_thrust.size(); ++i)
    {
      s << indent << "  rotor_thrust[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rotor_thrust[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_ROTORCONTROL_H
