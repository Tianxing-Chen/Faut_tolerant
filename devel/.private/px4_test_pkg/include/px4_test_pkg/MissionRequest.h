// Generated by gencpp from file px4_test_pkg/MissionRequest.msg
// DO NOT EDIT!


#ifndef PX4_TEST_PKG_MESSAGE_MISSIONREQUEST_H
#define PX4_TEST_PKG_MESSAGE_MISSIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace px4_test_pkg
{
template <class ContainerAllocator>
struct MissionRequest_
{
  typedef MissionRequest_<ContainerAllocator> Type;

  MissionRequest_()
    : mission(0)
    , x(0.0)
    , y(0.0)  {
    }
  MissionRequest_(const ContainerAllocator& _alloc)
    : mission(0)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _mission_type;
  _mission_type mission;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TAKEOFF)
  #undef TAKEOFF
#endif
#if defined(_WIN32) && defined(MOAE)
  #undef MOAE
#endif
#if defined(_WIN32) && defined(LAND)
  #undef LAND
#endif

  enum {
    TAKEOFF = 1,
    MOAE = 2,
    LAND = 3,
  };


  typedef boost::shared_ptr< ::px4_test_pkg::MissionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px4_test_pkg::MissionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MissionRequest_

typedef ::px4_test_pkg::MissionRequest_<std::allocator<void> > MissionRequest;

typedef boost::shared_ptr< ::px4_test_pkg::MissionRequest > MissionRequestPtr;
typedef boost::shared_ptr< ::px4_test_pkg::MissionRequest const> MissionRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px4_test_pkg::MissionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px4_test_pkg::MissionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px4_test_pkg::MissionRequest_<ContainerAllocator1> & lhs, const ::px4_test_pkg::MissionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mission == rhs.mission &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px4_test_pkg::MissionRequest_<ContainerAllocator1> & lhs, const ::px4_test_pkg::MissionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px4_test_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::px4_test_pkg::MissionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px4_test_pkg::MissionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px4_test_pkg::MissionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px4_test_pkg::MissionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_test_pkg::MissionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_test_pkg::MissionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px4_test_pkg::MissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b68e541b3cad6ae66e9d0714dd55ad2";
  }

  static const char* value(const ::px4_test_pkg::MissionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b68e541b3cad6aeULL;
  static const uint64_t static_value2 = 0x66e9d0714dd55ad2ULL;
};

template<class ContainerAllocator>
struct DataType< ::px4_test_pkg::MissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px4_test_pkg/MissionRequest";
  }

  static const char* value(const ::px4_test_pkg::MissionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px4_test_pkg::MissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 TAKEOFF = 1\n"
"int8 MOAE = 2\n"
"int8 LAND = 3\n"
"\n"
"int8 mission\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::px4_test_pkg::MissionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px4_test_pkg::MissionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px4_test_pkg::MissionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px4_test_pkg::MissionRequest_<ContainerAllocator>& v)
  {
    s << indent << "mission: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mission);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX4_TEST_PKG_MESSAGE_MISSIONREQUEST_H
